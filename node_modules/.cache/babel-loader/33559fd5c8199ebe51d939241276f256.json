{"ast":null,"code":"var _s = $RefreshSig$();\n\n// use callback, use effect .map \nimport React, { useState, useEffect } from 'react'; // fetching bitcoin price from public api \n\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Price() {\n  _s();\n\n  let [Price, SetPrice] = useState();\n\n  const FetchPriceData = async () => {\n    await fetch('\"wss://ws.coinapi.io/v1/\"').then(response => response.json()).then(response => SetPrice(response)).catch(error => console.info(error));\n  };\n\n  useEffect(() => {\n    FetchPriceData();\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: Price.map(currentPrice => {})\n  }, void 0, false);\n}\n\n_s(Price, \"CTKxl4Pd7JMZ5eKpzeCTjuoo+eU=\");\n\n_c = Price;\n\nvar _c;\n\n$RefreshReg$(_c, \"Price\");","map":{"version":3,"sources":["/Users/joseignacionaranjo/D-Wallet/Crypto-Wallet/src/Components/Price.js"],"names":["React","useState","useEffect","Price","SetPrice","FetchPriceData","fetch","then","response","json","catch","error","console","info","map","currentPrice"],"mappings":";;AACA;AACA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,QAAuC,OAAvC,C,CAEA;;;;AACA,eAAe,SAASC,KAAT,GAAgB;AAAA;;AAE/B,MAAI,CAACA,KAAD,EAAOC,QAAP,IAAmBH,QAAQ,EAA/B;;AAEE,QAAMI,cAAc,GAAI,YAAW;AACjC,UAAMC,KAAK,CAAC,2BAAD,CAAL,CAAmCC,IAAnC,CACJC,QAAQ,IAAEA,QAAQ,CAACC,IAAT,EADN,EAEJF,IAFI,CAECC,QAAQ,IAAEJ,QAAQ,CAACI,QAAD,CAFnB,EAGLE,KAHK,CAGCC,KAAK,IAAEC,OAAO,CAACC,IAAR,CAAaF,KAAb,CAHR,CAAN;AAKH,GANC;;AAOFT,EAAAA,SAAS,CAAC,MAAI;AACZG,IAAAA,cAAc;AACf,GAFQ,CAAT;AAIA,sBAAO;AAAA,cACLF,KAAK,CAACW,GAAN,CAAUC,YAAY,IAAE,CAExB,CAFA;AADK,mBAAP;AASC;;GAxBuBZ,K;;KAAAA,K","sourcesContent":["\n// use callback, use effect .map \nimport React,{useState,useEffect} from 'react';\n\n// fetching bitcoin price from public api \nexport default function Price(){\n\nlet [Price,SetPrice] = useState();\n\n  const FetchPriceData =  async () =>{\n    await fetch('\"wss://ws.coinapi.io/v1/\"').then(\n      response=>response.json()\n    ).then(response=>SetPrice(response))\n    .catch(error=>console.info(error));\n\n}\nuseEffect(()=>{\n  FetchPriceData();\n})\n\nreturn(<>\n {Price.map(currentPrice=>{\n\n })}\n\n</>\n)\n  \n \n}\n \n"]},"metadata":{},"sourceType":"module"}